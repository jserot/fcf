type 'a list = Nil | Cons of 'a * 'a list; 

fsm sum_list (l:int list) = 
  let f (l, acc) =
  | l~Nil -> return acc 
  | l~Cons(v,ll) -> f (ll, acc+v) in
  f (l,0)
;

fsm and_list (l:bool list) = 
  let f (l, acc) =
  | l~Nil -> return acc
  | l~Cons(v,ll) -> f (ll, acc&&v) in
  f (l,true)
;

let _ = sum_list(Nil);
let _ = sum_list(Cons(1,Nil));
let _ = sum_list(Cons(1,Cons(2,Nil)));
let _ = sum_list(Cons(1,Cons(2,Cons(3,Nil))));

let _ = and_list(Nil);
let _ = and_list(Cons(true,Nil));
let _ = and_list(Cons(true,Cons(false,Nil)));
let _ = and_list(Cons(true,Cons(true,Nil)));
